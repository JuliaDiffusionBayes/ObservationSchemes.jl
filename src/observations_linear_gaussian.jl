#=
    Utility functions for defining the observations
=#
"""
    LinearGsnObs{D,T,FPT,S,R} <: Observation{D,T}

Observation of the underlying process that is of the form:
LX+ξ, where ξ∼N(μ,Σ) and L,Σ and μ are respectively matrices and a vector of
appropriate dimensions. `FPT` stores information about first-passage times.
`full_obs` is an indicator for whether it is a full observation of the process
(as it grants the use of Markov Property)
"""
struct LinearGsnObs{D,T,FPT,S,R} <: Observation{D,T}
    L::S
    μ::T
    Σ::R
    obs::T
    t::Float64
    full_obs::Bool

    function LinearGsnObs(
            t, obs::T, L::S, Σ::R, μ::T, fpt::FPT, full_obs
        ) where {T,S,R,FPT}
        D = length(obs)
        new{D,T,FPT,S,R}(L, μ, Σ, obs, t, full_obs)
    end
end

function LinearGsnObs(t, obs; kwargs...)
    LinearGsnObs(ismutable(obs), t, obs; kwargs...)
end

function LinearGsnObs(
        ::Val{true},
        t,
        obs::T;
        L::S=Diagonal(repeat([one(eltype(T))], length(obs))),
        Σ::R=Diagonal(repeat([one(eltype(T))], length(obs)))*1e-11,
        μ::T=zeros(eltype(T),length(obs)),
        fpt::FPT=NoFirstPassageTimes(),
        full_obs=false
    ) where {T,S,R,FPT}
    LinearGsnObs(t, obs, L, Σ, μ, fpt, full_obs)
end

function LinearGsnObs(
        ::Val{false},
        t,
        obs::T;
        L::S=SDiagonal{length(obs)}(I),
        Σ::R=SDiagonal{length(obs)}(I)*1e-11,
        μ::T=zero(T),
        fpt::FPT=NoFirstPassageTimes(),
        full_obs=false
    ) where {T,S,R,FPT}
    LinearGsnObs(t, obs, L, Σ, μ, fpt, full_obs)
end


"""
    fpt_info(::LinearGsnObs{D,T,FPT}) where {D,T,FPT}

Return information about first-passage times
"""
fpt_info(::LinearGsnObs{D,T,FPT}) where {D,T,FPT} = FPT


function show(obs::LinearGsnObs)
    L, μ, Σ, v, t, full_obs = obs.L, obs.μ, obs.Σ, obs.obs, obs.t, obs.full_obs
    L_size = size(L)
    println(repeat("⏤", 40 ))
    println("|Observation `v = Lx+ξ`, where `L` is a $L_size-matrix, `x` is a ",
        "state of the stochastic process and `ξ`∼N(μ,Σ)."
    )
    println("|...")
    println("|| v: $v (observation),\n|| \t→ typeof(v): ", typeof(v),",")
    println("|| made at time $t.")
    println("|...")
    println("|L: $L,\n|\t→ typeof(L): ", typeof(L))
    println("|μ: $μ,\n|\t→ typeof(μ): ", typeof(μ))
    println("|Σ: $Σ,\n|\t→ typeof(Σ): ", typeof(Σ))
    println("|...")
    println("|This is ", (full_obs ? "" : "NOT ") , "an exact observation.")
    println("|...")
    show(fpt_info(obs); prepend="|")
    println(repeat("⋆ ", 10))
end

#NOTE these will be overloaded for PARAMETRIZED linear observations
# (will be auto-generated by macros)
L(o::LinearGsnObs) = o.L
μ(o::LinearGsnObs) = o.μ
Σ(o::LinearGsnObs) = o.Σ
Λ(o::LinearGsnObs) = inv(o.Σ)
ν(o::LinearGsnObs) = o.obs
clone(o::LinearGsnObs, args...) = o
update_params(o::LinearGsnObs, new_params...) = o
parameter_names(o::LinearGsnObs) = tuple()
parameters(o::LinearGsnObs) = tuple()
